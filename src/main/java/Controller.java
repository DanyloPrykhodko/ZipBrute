import TextFields.NumbersField;import javafx.application.Platform;import javafx.scene.control.*;import javafx.stage.DirectoryChooser;import javafx.stage.FileChooser;import javafx.stage.Modality;import net.lingala.zip4j.core.ZipFile;import net.lingala.zip4j.exception.ZipException;import net.lingala.zip4j.model.FileHeader;import javax.swing.filechooser.FileSystemView;import java.io.File;import java.io.IOException;import java.nio.file.Files;import java.util.ArrayList;import java.util.ConcurrentModificationException;import java.util.Date;import java.util.List;/** * The GUI Controller. */public class Controller {    public Label passwordLabel;    public Label statusLabel;    public Button chooseFileButton;    public Button addThreadButton;    public Button removeThreadButton;    public Button bruteButton;    public NumbersField threadsField;    public Slider passwordLengthSlider;    public ProgressBar progressBar;    public TreeView archiveTree;    public CheckBox growingLengthCheck;    public CheckBox numbersCheck;    public CheckBox specialsCheck;    public CheckBox lowerCaseCheck;    public CheckBox upperCaseCheck;    private File file; // File for brut.    private File directory; // Support directory.    private BruteForce bruteForce; // Brute force.    private String password; // Password.    private boolean isFound; // The password is found.    /** Initialize class method. */    public void initialize() {        isFound = false;        // Create the support directory.        directory = new File(FileSystemView.getFileSystemView().getDefaultDirectory() + "/ZipBrute");        directory.mkdir();        // Delete the support directory on shutdown.        Runtime.getRuntime().addShutdownHook(new Thread(() -> deleteDirectory(directory), "Shutdown"));        removeThreadButton.setDisable(true);        bruteButton.setDisable(true);    }    /** Choose file action of the button. */    public void chooseFileAction() {        // Get zip file.        FileChooser fileChooser = new FileChooser();        fileChooser.getExtensionFilters().add(new FileChooser.ExtensionFilter("Zip Archive (*.zip)", "*.zip"));        file = fileChooser.showOpenDialog(Main.stage);        if (file == null)            return;        try {            // Draw file tree.            ZipFile archive = new ZipFile(file);            TreeItem root = new TreeItem(archive.getFile().getName());            archiveTree.setRoot(root);            ArrayList<TreeItem> treeItems = new ArrayList<>();            for (FileHeader fileHeader : (List<FileHeader>) archive.getFileHeaders()) {                String filename = fileHeader.getFileName();                if (filename.lastIndexOf('/') == (filename.length() - 1))                    filename = filename.substring(0, filename.length() - 1);                if (!filename.contains("/")) {                    TreeItem e = new TreeItem(filename);                    root.getChildren().add(e);                    treeItems.add(e);                }                else {                    String parent = filename.substring(0, filename.lastIndexOf('/'));                    if (parent.contains("/"))                        parent = parent.substring(parent.lastIndexOf('/') + 1);                    for (int i = 0; i < treeItems.size(); i++)                        if (treeItems.get(i).getValue().equals(parent)) {                            TreeItem e = new TreeItem(filename.substring(filename.lastIndexOf('/') + 1, filename.length()));                            treeItems.get(i).getChildren().add(e);                            treeItems.add(e);                        }                }            }        } catch (ZipException ignored) {}        chooseFileButton.setDisable(true);        bruteButton.setDisable(false);    }    /** Brute force action of the button. */    public void bruteAction() {        // Get charsets length.        int numbers = 0, lowerCase = 0, upperCase = 0, special = 0;        if (numbersCheck.isSelected())            numbers = Charset.NUMBERS.length;        if (lowerCaseCheck.isSelected())            lowerCase = Charset.LOWER_CASE.length;        if (upperCaseCheck.isSelected())            upperCase = Charset.UPPER_CASE.length;        if (specialsCheck.isSelected())            special = Charset.SPECIAL.length;        int length = numbers + lowerCase + upperCase + special;        // Show the alert if don't have selected charsets.        if (length == 0) {            Alert alert = new Alert(Alert.AlertType.ERROR, "You don't choose not one of the charsets! Choose charset and try again!", ButtonType.OK);            alert.initModality(Modality.WINDOW_MODAL);            alert.initOwner(Main.stage);            alert.showAndWait();            return;        }        // Create charset.        char[] chars = new char[length];        if (numbersCheck.isSelected())            System.arraycopy(Charset.NUMBERS, 0, chars, 0, Charset.NUMBERS.length);        if (lowerCaseCheck.isSelected())            System.arraycopy(Charset.LOWER_CASE, 0, chars, numbers, Charset.LOWER_CASE.length);        if (upperCaseCheck.isSelected())            System.arraycopy(Charset.UPPER_CASE, 0, chars, numbers + lowerCase, Charset.UPPER_CASE.length);        if (specialsCheck.isSelected())            System.arraycopy(Charset.SPECIAL, 0, chars, numbers + lowerCase + upperCase, Charset.SPECIAL.length);        addThreadButton.setDisable(true);        removeThreadButton.setDisable(true);        threadsField.setDisable(true);        chooseFileButton.setDisable(true);        numbersCheck.setDisable(true);        lowerCaseCheck.setDisable(true);        upperCaseCheck.setDisable(true);        specialsCheck.setDisable(true);        passwordLengthSlider.setDisable(true);        growingLengthCheck.setDisable(true);        bruteButton.setDisable(true);        // Set status.        Platform.runLater(() -> statusLabel.setText("Password brute..."));        // Get number of threads.        int numberOfThreads = Integer.parseInt(threadsField.getText());        // Copy zip files to the support directory.        ArrayList<File> archives = new ArrayList<>();        for (int i = 0; i < numberOfThreads; i++)            try {                File file = new File(directory + "/" + this.file.getName().substring(0, this.file.getName().length() - 4) + i + ".zip");                archives.add(file);                Files.copy(this.file.toPath(), file.toPath());            } catch (IOException ignore) {}        ArrayList<Thread> threads = new ArrayList<>();        // Main thread.        new Thread(() -> {            // Progress thread.            new Thread(() -> {                while (!isFound) {                    try {                        if (bruteForce != null)                            progressBar.setProgress(bruteForce.getProgress());                        Platform.runLater(() -> passwordLabel.setText(password));                        Thread.sleep(100);                    } catch (ConcurrentModificationException | InterruptedException ignored) {}                }            }).start();            // Time of the start brute.            Date start = new Date();            if (growingLengthCheck.isSelected()) {                // Growing password length.                for (int i = 1; i <= (int) passwordLengthSlider.getValue(); i++) {                    bruteForce = new BruteForce(chars, i);                    for (int j = 0; j < numberOfThreads; j++)                        try {                            threads.add(new Thread(new Target(Main.controller, new ZipFile(archives.get(j)))));                        } catch (ZipException ignored) {}                    startAndWaitThreads(threads);                    if (isFound)                        break;                }            } else {                // Final password length.                bruteForce = new BruteForce(chars, (int) passwordLengthSlider.getValue());                for (int j = 0; j < numberOfThreads; j++)                    try {                        threads.add(new Thread(new Target(Main.controller, new ZipFile(archives.get(j)))));                    } catch (ZipException ignored) {}                startAndWaitThreads(threads);            }            if (isFound) {                Platform.runLater(() -> statusLabel.setText(String.format("Found for %.0f sec.", (new Date().getTime() - start.getTime()) / 1000.0)));                Platform.runLater(() -> passwordLabel.setText(password));                progressBar.setProgress(1);                // Extract zip file.                Platform.runLater(() -> {                    // Get save path.                    File file = new DirectoryChooser().showDialog(Main.stage);                    if (file == null)                        return;                    try {                        ZipFile archive = new ZipFile(this.file);                        archive.setPassword(password);                        File directory = new File(file + "/" + archive.getFile().getName().substring(0, archive.getFile().getName().lastIndexOf('.')));                        directory.mkdir();                        archive.extractAll(String.valueOf(directory));                    } catch (ZipException ignored) {}                });            } else {                Platform.runLater(() -> statusLabel.setText("Password don't found!"));                Platform.runLater(() -> passwordLabel.setText(""));                progressBar.setProgress(0);            }            try {                Thread.sleep(100);            } catch (InterruptedException ignored) {}            bruteForce = null;            isFound = false;            chooseFileButton.setDisable(false);            addThreadButton.setDisable(false);            removeThreadButton.setDisable(false);            threadsField.setDisable(false);            chooseFileButton.setDisable(false);            numbersCheck.setDisable(false);            lowerCaseCheck.setDisable(false);            upperCaseCheck.setDisable(false);            specialsCheck.setDisable(false);            passwordLengthSlider.setDisable(false);            growingLengthCheck.setDisable(false);            bruteButton.setDisable(false);        }).start();    }    /** Add thread action of the button. */    public void addThreadAction() {        Integer numberOfThreads = Integer.parseInt(threadsField.getText());        numberOfThreads++;        threadsField.setText(String.valueOf(numberOfThreads));        if (numberOfThreads > 1)            removeThreadButton.setDisable(false);    }    /** Remove thread action of the button. */    public void removeThreadAction() {        Integer numberOfThreads = Integer.parseInt(threadsField.getText());        numberOfThreads--;        threadsField.setText(String.valueOf(numberOfThreads));        if (numberOfThreads <= 1)            removeThreadButton.setDisable(true);    }    /**     * Start the threads and wait while they is alive.     * @param threads Threads.     */    private void startAndWaitThreads(ArrayList<Thread> threads){        // Start the threads.        for (Thread thread : threads)            thread.start();        // Wait while the threads is working.        for (Thread thread : threads)            if (thread.isAlive())                try {                    thread.join();                } catch (InterruptedException e) {                    e.printStackTrace();                }        // Delete threads.        threads.clear();    }    /**     * Delete the directory.     * @param directory Directory.     */    private void deleteDirectory(File directory) {        if (directory.listFiles().length == 0)            directory.delete();        else {            for (File f : directory.listFiles())                if (f.isDirectory())                    deleteDirectory(f);                else                    f.delete();            directory.delete();        }    }    public BruteForce getBruteForce() {        return bruteForce;    }    public boolean isFound() {        return isFound;    }    public void setFound() {        isFound = true;    }    public void setPassword(String password) {        this.password = password;    }    /**     * The target for check password.     */    class Target implements Runnable {        private Controller controller; // Controller.        private BruteForce bruteForce; // Brute force.        private ZipFile zipFile; // Zip file.        /** Constructor. */        public Target(Controller controller, ZipFile zipFile) {            this.controller = controller;            this.bruteForce = controller.getBruteForce();            this.zipFile = zipFile;        }        @Override        public void run() {            while (bruteForce.isAlive() && !controller.isFound()) {                // Wait while the brute force is busy.                while (bruteForce.isBusy())                    try {                        Thread.sleep(10);                    } catch (InterruptedException ignored) {}                // Brute the password.                String password = bruteForce.nextBrute();                controller.setPassword(password);                try {                    // Set password.                    zipFile.setPassword(password);                    // Try to extract the zip file.                    zipFile.extractAll(zipFile.getFile().getParent());                    // The password is correct.                    controller.setFound();                    // Wait while zip file extracting.                    while (zipFile.getProgressMonitor().getPercentDone() < 100)                        try {                            Thread.sleep(100);                        } catch (InterruptedException ignored) {}                    controller.setPassword(password);                    break;                } catch (ZipException ignored) {}            }        }    }}